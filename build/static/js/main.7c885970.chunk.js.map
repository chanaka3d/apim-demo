{"version":3,"sources":["config.js","helpers/cookies.js","actions/session.js","actions/sign-in.js","actions/sign-out.js","Consumer/Title.js","Config/axiosConfig.js","Consumer/Consumer.js","FinanacialAdvisor/History.js","FinanacialAdvisor/Units.js","MeterReader/MeterReader.js","TrainSchedule/TrainSchedule.js","DashBoard.js","actions/register.js","App.js","reportWebVitals.js","serviceWorker.js","index.js","Config/RoleConstant.js"],"names":["CONFIG","Cookies","getAllSessionParameters","session","localStorage","getItem","decodeIdToken","token","JSON","parse","atob","split","getAllUserData","user","sendTokenRequest","code","body","push","axios","defaults","headers","post","join","getTokenRequestHeaders","then","response","status","Promise","reject","Error","data","setItem","access_token","refresh_token","scope","id_token","token_type","expires_in","catch","error","dispatchLogout","key","removeItem","window","location","href","Title","props","Typography","component","variant","color","gutterBottom","children","instance","create","baseURL","common","interceptors","request","use","config","ACCESS_TOKEN","Authorization","columns","field","hide","headerName","width","editable","defaultTheme","createTheme","useStyles","makeStyles","theme","createStyles","root","padding","spacing","justifyContent","display","alignItems","flexWrap","textField","breakpoints","down","marginRight","borderBottom","palette","divider","QuickSearchToolbar","classes","className","TextField","value","onChange","placeholder","InputProps","startAdornment","fontSize","endAdornment","IconButton","title","size","style","visibility","onClick","clearSearch","Consumer","React","useState","account","setAccount","searchText","setSearchText","invoices","setInvoices","rows","setRows","valueRef","useRef","selection","setSelection","userAccounts","setUserAccounts","requestSearch","searchValue","searchRegex","RegExp","replace","filteredRows","filter","row","Object","keys","some","test","toString","useEffect","axiosConfig","get","process","REACT_APP_APIM_CONSUMER_PREFIX","REACT_APP_API_PREFIX","params","username","alert","Fragment","Grid","container","item","xs","md","lg","Paper","sx","p","flexDirection","height","map","d","idx","REACT_APP_APIM_ACCOUNT_PREFIX","mobile_number","account_number","accountNumber","clickAccountNumber","outstandAmount","flex","lastModifiedDate","FormLabel","InputLabel","htmlFor","OutlinedInput","id","InputAdornment","position","label","inputRef","RadioGroup","name","event","FormControlLabel","control","Radio","Stack","direction","Button","payAmount","payMethod","jsonData","firstName","lastName","email","mobile","reload","postData","current","components","Toolbar","componentsProps","toolbar","target","backgroundColor","background","paper","inline","green","getContrastText","TrainSchedule","schedule","setSchedule","console","log","pb","List","s","ListItem","ListItemAvatar","isActive","Avatar","ListItemText","primary","secondary","commenced","Divider","CircularProgress","loginClick","authorizeRequest","sendAuthorizationRequest","loginWithOTPClick","sendAuthorizationRequestWithOTP","registerClick","registrationRequest","sendRegistration","MainDashBoard","isLoggedIn","setIsLoggedIn","setIdToken","setTokenResponse","_tokenResponse","REFRESH_TOKEN","SCOPE","ID_TOKEN","TOKEN_TYPE","parseInt","EXPIRES_IN","URL","searchParams","sub","role","userInLocalStore","form","RoleConstant","consumer","Box","CssBaseline","AppBar","noWrap","flexGrow","mode","grey","sm","flexShrink","overflow","Container","maxWidth","mt","mb","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","meterReader","finance","admin"],"mappings":"klBAAaA,EACS,oCADTA,EAEa,wCAFbA,EAGQ,OAHRA,EAIA,kFAJAA,EAKO,4BALPA,EAMI,+BANJA,EAOQ,+BAPRA,EAQK,qBARLA,EASK,4BATLA,EAUK,mCAVLA,EAWY,2DAXZA,EAYO,eAZPA,EAcM,2BCXH,IAAIC,I,qBC2DPC,EAA0B,WACnC,IAAMC,EAAU,GAOhB,OANAA,EAAO,aAAmBC,aAAaC,QAAQ,gBAC/CF,EAAO,cAAoBC,aAAaC,QAAQ,iBAChDF,EAAO,MAAYC,aAAaC,QAAQ,SACxCF,EAAO,SAAeC,aAAaC,QAAQ,YAC3CF,EAAO,WAAiBC,aAAaC,QAAQ,cAC7CF,EAAO,WAAiBC,aAAaC,QAAQ,cACtCF,GASEG,EAAgB,SAACC,GAC1B,OAAOC,KAAKC,MAAMC,KAAKH,EAAMI,MAAM,KAAK,MAG/BC,EAAiB,WAC1B,IAAMC,EAAO,GAOb,OANAA,EAAI,GAAST,aAAaC,QAAQ,MAClCQ,EAAI,SAAeT,aAAaC,QAAQ,YACxCQ,EAAI,UAAgBT,aAAaC,QAAQ,aACzCQ,EAAI,SAAeT,aAAaC,QAAQ,YACxCQ,EAAI,MAAYT,aAAaC,QAAQ,SACrCQ,EAAI,OAAaT,aAAaC,QAAQ,UAC/BQ,GCjEEC,G,OAAmB,SAACC,GACVX,aAAaC,QAAQ,iBAAxC,IACMW,EAAO,GAQb,OAPAA,EAAKC,KAAL,oBAAwBjB,IACxBgB,EAAKC,KAAL,wBAA4BjB,IAC5BgB,EAAKC,KAAL,eAAmBF,IACnBC,EAAKC,KAAL,qBAAyBjB,IACzBgB,EAAKC,KAAL,uBAA2BjB,IAE3BkB,IAAMC,SAASC,QAAQC,KAAK,+BAAiC,IACtDH,IAAMG,KAAN,UAAerB,GAA0BgB,EAAKM,KAAK,KAAMC,KAC3DC,MAAK,SAAAC,GACF,OAAwB,MAApBA,EAASC,OACFC,QAAQC,OAAO,IAAIC,MAAM,uDAC1BJ,EAASC,UDlCUI,ECqCJL,EAASK,KDpC1C1B,aAAa2B,QAAQ,eAAgBD,EAAKE,cAC1C5B,aAAa2B,QAAQ,gBAAiBD,EAAKG,eAC3C7B,aAAa2B,QAAQ,QAASD,EAAKI,OACnC9B,aAAa2B,QAAQ,WAAYD,EAAKK,UACtC/B,aAAa2B,QAAQ,aAAcD,EAAKM,YACxChC,aAAa2B,QAAQ,aAAcD,EAAKO,YCiCzB,CAACZ,EAASK,KAAMxB,EAAcmB,EAASK,KAAKK,YDvCvB,IAACL,KCyC9BQ,OAAM,SAACC,GACN,OAAOZ,QAAQC,OAAOW,QAS5BhB,EAAyB,WAC3B,MAAO,CACHH,QAAS,CACL,OAAU,mBACV,8BAA8B,GAA9B,OAAmCpB,GACnC,eAAgB,uCCxDfwC,EAAiB,WAC1B,IFcgCC,EEd1BlC,GFc0BkC,EEdE,WFgB3BrC,aAAaC,QAAQoC,IAQ5BrC,aAAasC,WAAW,gBACxBtC,aAAasC,WAAW,iBACxBtC,aAAasC,WAAW,SACxBtC,aAAasC,WAAW,YACxBtC,aAAasC,WAAW,cACxBtC,aAAasC,WAAW,cACxBtC,aAAasC,WAAW,MAExBtC,aAAasC,WAAW,aACxBtC,aAAasC,WAAW,YACxBtC,aAAasC,WAAW,SACxBtC,aAAasC,WAAW,UACxBtC,aAAasC,WAAW,YACxBtC,aAAasC,WAAW,iBElCxBC,OAAOC,SAASC,KAAhB,UAA0B7C,EAA1B,0BAA6DO,EAA7D,qCAA+FP,I,gHCMpF8C,MAZf,SAAeC,GACb,OACE,cAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAKC,MAAM,UAAUC,cAAY,EAApE,SACGL,EAAMM,Y,0KCHPC,GAAWpC,IAAMqC,OAAO,CAC1BC,QAASxD,IAGbsD,GAASnC,SAASC,QAAQqC,OAAO,gBAAkB,mBACnDH,GAASnC,SAASC,QAAQqC,OAAO,+BAAiC,IAClEH,GAASnC,SAASC,QAAQqC,OAA1B,OAA6C,MAC7CH,GAASnC,SAASC,QAAQqC,OAAO,mBAAqB,oBAGtDH,GAASI,aAAaC,QAAQC,KAAI,SAAUC,GACxC,IACMtD,EADUL,IACM4D,aAEtB,OADAD,EAAOzC,QAAQ2C,cAAiBxD,EAAK,iBAAaA,GAAU,GACrDsD,KAGIP,UCSTU,GAAU,CACZ,CAACC,MAAO,KAAMC,MAAM,GACpB,CAACD,MAAO,gBAAiBE,WAAY,iBAAkBC,MAAO,KAC9D,CAACH,MAAO,YAAaE,WAAY,OAAQC,MAAO,IAAKC,UAAU,GAC/D,CAACJ,MAAO,SAAUE,WAAY,SAAUC,MAAO,IAAKC,UAAU,GAC9D,CAACJ,MAAO,SAAUE,WAAY,SAAUC,MAAO,IAAKC,UAAU,IAWlE,IAAMC,GAAeC,eACfC,GAAYC,cACd,SAACC,GAAD,aACIC,aAAa,CACTC,KAAM,CACFC,QAASH,EAAMI,QAAQ,GAAK,GAAK,GACjCC,eAAgB,gBAChBC,QAAS,OACTC,WAAY,aACZC,SAAU,QAEdC,WAAS,mBACJT,EAAMU,YAAYC,KAAK,MAAQ,CAC5BjB,MAAO,SAFN,uBAIGM,EAAMI,QAAQ,EAAG,GAAK,MAJzB,cAKL,qBAAsB,CAClBQ,YAAaZ,EAAMI,QAAQ,MAN1B,cAQL,+BAAgC,CAC5BS,aAAa,aAAD,OAAeb,EAAMc,QAAQC,WATxC,OAajB,CAACnB,kBAGL,SAASoB,GAAmB3C,GACxB,IAAM4C,EAAUnB,KAEhB,OACI,sBAAKoB,UAAWD,EAAQf,KAAxB,UACI,gCACI,cAAC,KAAD,IACA,cAAC,KAAD,OAEJ,cAACiB,GAAA,EAAD,CACI3C,QAAQ,WACR4C,MAAO/C,EAAM+C,MACbC,SAAUhD,EAAMgD,SAChBC,YAAY,eACZJ,UAAWD,EAAQR,UACnBc,WAAY,CACRC,eAAgB,cAAC,KAAD,CAAYC,SAAS,UACrCC,aACI,cAACC,EAAA,EAAD,CACIC,MAAM,QACN,aAAW,QACXC,KAAK,QACLC,MAAO,CAACC,WAAY1D,EAAM+C,MAAQ,UAAY,UAC9CY,QAAS3D,EAAM4D,YALnB,SAOI,cAAC,KAAD,CAAWR,SAAS,kBA2DjC,SAASS,KAAY,IAAD,EAC/B,EAA8BC,IAAMC,SAAS,IAA7C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCH,IAAMC,SAAS,IAAnD,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCL,IAAMC,SAAS,IAA/C,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAwBP,IAAMC,SAAS,IAAvC,mBAAOO,EAAP,KAAaC,EAAb,KACMC,EAAWC,iBAAO,IACxB,EAAkCX,IAAMC,WAAxC,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAwCb,IAAMC,SAAS,IAAvD,mBAAOa,EAAP,KAAqBC,EAArB,KAOMC,EAAgB,SAACC,GACnBZ,EAAcY,GACd,IAAMC,EAAc,IAAIC,OAAoBF,EAlInCG,QAAQ,2BAA4B,QAkIa,KACpDC,EAAef,EAASgB,QAAO,SAACC,GAClC,OAAOC,OAAOC,KAAKF,GAAKG,MAAK,SAACtE,GAC1B,OAAO8D,EAAYS,KAAKJ,EAAInE,GAAOwE,kBAG3CnB,EAAQY,IA0CZ,OAXAQ,qBAAU,WACN,IAAMvI,EAAUS,IAChB+H,GAAYC,IAAIC,mIAAYC,+BAAiCD,mIAAYE,qBAAuB,qBAAsB,CAACC,OAAQ,CAACC,SAAU9I,EAAQ8I,YAC7IzH,MAAK,SAAUC,GACZmG,EAAgBnG,EAASK,SAE5BQ,OAAM,SAAUC,GACb2G,MAAM3G,QAEf,IAGC,cAAC,IAAM4G,SAAP,UACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACvE,QAAS,EAAzB,UACI,cAACsE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,SACI,eAACC,EAAA,EAAD,CACIC,GAAI,CACAC,EAAG,EACH5E,QAAS,OACT6E,cAAe,SACfC,OAAQ,KALhB,UAQI,cAAC,EAAD,2BACA,6BACKnC,EAAaoC,KAAI,SAAUC,EAAGC,GAC3B,OAAQ,oBACIvD,QAAS,kBAvDjD,SAA4BK,GACxB4B,GAAYC,IAAIC,mIAAYqB,8BAAgCrB,mIAAYE,qBAAuB,WAAY,CACvGC,OAAQ,CACJmB,cAAe,GACfC,eAAgBrD,EAAQsD,iBAG3B7I,MAAK,SAAUC,GACZuF,EAAWvF,EAASK,SAEvBQ,OAAM,SAAUC,GACb2G,MAAM3G,MAEdoG,GAAYC,IAAIC,mIAAYC,+BAAiCD,mIAAYE,qBAAuB,qBAAsB,CAClHC,OAAQ,CACJoB,eAAgBrD,EAAQsD,cACxBpB,SAAU,MAGbzH,MAAK,SAAUC,GACZ2F,EAAY3F,EAASK,MACrBwF,EAAQ7F,EAASK,SAEpBQ,OAAM,SAAUC,GACb2G,MAAM3G,MAgC0B+H,CAAmBN,IAF3B,SAGOA,EAAEK,eAHAJ,aASjC,cAACb,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,SACI,cAACC,EAAA,EAAD,CACIC,GAAI,CACAC,EAAG,EACH5E,QAAS,OACT6E,cAAe,SACfC,OAAQ,KALhB,SAQI,eAAC,IAAMX,SAAP,WACI,cAAC,EAAD,0BACA,eAACnG,EAAA,EAAD,CAAYC,UAAU,IAAIC,QAAQ,KAAlC,cACM6D,EAAQwD,kBAEd,eAACvH,EAAA,EAAD,CAAYG,MAAM,iBAAiBwG,GAAI,CAACa,KAAM,GAA9C,cACMzD,EAAQ0D,2BAK1B,cAACrB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,SACI,cAACC,EAAA,EAAD,CACIC,GAAI,CACAC,EAAG,EACH5E,QAAS,OACT6E,cAAe,SACfC,OAAQ,KALhB,SAQI,eAAC,IAAMX,SAAP,WACI,eAACuB,EAAA,EAAD,iCAA+B3D,EAAQsD,cAAvC,OACA,cAACM,EAAA,EAAD,CAAYC,QAAQ,4BAApB,oBACA,cAACC,EAAA,EAAD,CACIC,GAAG,4BACH5E,eAAgB,cAAC6E,EAAA,EAAD,CAAgBC,SAAS,QAAzB,gBAChBC,MAAM,SACNC,SAAU3D,IAEd,cAACmD,EAAA,EAAD,CAAWzH,UAAU,SAArB,6BACA,eAACkI,EAAA,GAAD,GAAYC,KAAK,QAAQhD,KAAG,EAAC,aAAW,kBAAxC,qBACiB,2BADjB,sBACkDX,GADlD,0BArHA,SAAC4D,EAAOvF,GAC5B4B,EAAa5B,MAoHO,0BAGI,cAACwF,EAAA,EAAD,CAAkBxF,MAAM,OAAOyF,QAAS,cAACC,EAAA,EAAD,IAAUP,MAAM,SACxD,cAACK,EAAA,EAAD,CAAkBxF,MAAM,SAASyF,QAAS,cAACC,EAAA,EAAD,IAAUP,MAAM,WAC1D,cAACK,EAAA,EAAD,CAAkBxF,MAAM,WAAWyF,QAAS,cAACC,EAAA,EAAD,IAAUP,MAAM,eALhE,IAOA,cAACQ,EAAA,EAAD,CAAOC,UAAU,MAAM5G,QAAS,EAAhC,SACI,cAAC6G,EAAA,EAAD,CAAQzI,QAAQ,YAAYwD,QAAS,YAnLrE,SAAkB5E,GAEd,GAAKA,EAAK8J,UAIV,GAAK9J,EAAKiF,QAIV,GAAKjF,EAAK+J,UAAV,CAKA,IAAM1L,EAAUS,IAEZkL,EAAW,CACX,GAAM,GACN,cAAiB,GACjB,OAAUhK,EAAK8J,UACf,OAAU9J,EAAK+J,UACf,gBAAmB/J,EAAKiF,QACxB,MAAS,CACL,GAAM5G,EAAQ2K,GACd,SAAY3K,EAAQ8I,SACpB,UAAa9I,EAAQ4L,UACrB,SAAY5L,EAAQ6L,SACpB,MAAS7L,EAAQ8L,MACjB,OAAU9L,EAAQ+L,SAK1BvD,GAAYtH,KAAKwH,mIAAYC,+BAAiCD,mIAAYE,qBAAuB,qBAAsB+C,GAClHtK,MAAK,SAAUC,GACZyH,MAAM,mBACNvG,OAAOC,SAASuJ,YAEnB7J,OAAM,SAAUC,GACb2G,MAAM3G,WA7BV2G,MAAM,8BAJNA,MAAM,8BAJNA,MAAM,wBAiLsBkD,CAAS,CACLR,UAAWrE,EAAS8E,QAAQvG,MAC5B+F,UAAWpE,EACXV,QAASA,KAJjB,0BAYhB,cAACqC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACI,cAACG,EAAA,EAAD,CAAOC,GAAI,CAACC,EAAG,EAAG5E,QAAS,OAAQ6E,cAAe,UAAlD,SACI,eAAC,IAAMV,SAAP,WACI,cAAC,EAAD,8BACA,qBAAK3C,MAAO,CAACsD,OAAQ,IAAK1F,MAAO,QAAjC,SACI,cAAC,KAAD,CACIkI,WAAY,CAACC,QAAS7G,IACtB2B,KAAMA,EACNrD,QAASA,GACTwI,gBAAiB,CACbC,QAAS,CACL3G,MAAOmB,EACPlB,SAAU,SAACsF,GAAD,OAAWxD,EAAcwD,EAAMqB,OAAO5G,QAChDa,YAAa,kBAAMkB,EAAc,uBC7R7E,IAAMvD,GAAeC,eACHE,cACd,SAACC,GAAD,aACIC,aAAa,CACTC,KAAM,CACFC,QAASH,EAAMI,QAAQ,GAAK,GAAK,GACjCC,eAAgB,gBAChBC,QAAS,OACTC,WAAY,aACZC,SAAU,QAEdC,WAAS,mBACJT,EAAMU,YAAYC,KAAK,MAAQ,CAC5BjB,MAAO,SAFN,uBAIGM,EAAMI,QAAQ,EAAG,GAAK,MAJzB,cAKL,qBAAsB,CAClBQ,YAAaZ,EAAMI,QAAQ,MAN1B,cAQL,+BAAgC,CAC5BS,aAAa,aAAD,OAAeb,EAAMc,QAAQC,WATxC,OAajB,CAACnB,kBC1BL,IAAMA,GAAeC,eACHE,cACd,SAACC,GAAD,aACIC,aAAa,CACXC,KAAM,CACJC,QAASH,EAAMI,QAAQ,GAAK,GAAK,GACjCC,eAAgB,gBAChBC,QAAS,OACTC,WAAY,aACZC,SAAU,QAEZC,WAAS,mBACNT,EAAMU,YAAYC,KAAK,MAAQ,CAC9BjB,MAAO,SAFF,uBAICM,EAAMI,QAAQ,EAAG,GAAK,MAJvB,cAKP,qBAAsB,CACpBQ,YAAaZ,EAAMI,QAAQ,MANtB,cAQP,+BAAgC,CAC9BS,aAAa,aAAD,OAAeb,EAAMc,QAAQC,WATpC,OAaf,CAAEnB,kB,wCC4CN,IAAMA,GAAeC,eACHE,cACd,SAACC,GAAD,aACIC,aAAa,CACTC,KAAM,CACFC,QAASH,EAAMI,QAAQ,GAAK,GAAK,GACjCC,eAAgB,gBAChBC,QAAS,OACTC,WAAY,aACZC,SAAU,QAEdC,WAAS,mBACJT,EAAMU,YAAYC,KAAK,MAAQ,CAC5BjB,MAAO,SAFN,uBAIGM,EAAMI,QAAQ,EAAG,GAAK,MAJzB,cAKL,qBAAsB,CAClBQ,YAAaZ,EAAMI,QAAQ,MAN1B,cAQL,+BAAgC,CAC5BS,aAAa,aAAD,OAAeb,EAAMc,QAAQC,WATxC,OAajB,CAACnB,kB,8IC3GCE,GAAYC,cAAW,SAACC,GAAD,MAAY,CACrCE,KAAM,CACFR,MAAO,OACPuI,gBAAiBjI,EAAMc,QAAQoH,WAAWC,OAE9CC,OAAQ,CACJ9H,QAAS,UAEb+H,MAAO,CACH5J,MAAOuB,EAAMc,QAAQwH,gBAAgBD,KAAM,MAC3CJ,gBAAiBI,KAAM,UAIhB,SAASE,KACpB,IAAMtH,EAAUnB,KAChB,EAAgCsC,mBAAS,MAAzC,mBAAOoG,EAAP,KAAiBC,EAAjB,KAYA,OAXAzE,qBAAU,WACNC,GAAYC,IAAI,2BAA4B,CAACI,OAAQ,KAChDxH,MAAK,SAAUC,GACZ2L,QAAQC,IAAI5L,EAASK,MACrBqL,EAAY1L,EAASK,SAExBQ,OAAM,SAAUC,GACb2G,MAAM3G,QAGf,IACC2K,EAIA,qCACI,cAAC,KAAD,CAAKI,GAAI,EAAT,SACI,cAAC,KAAD,CAAYpK,QAAQ,KAApB,8BAEJ,cAACqK,GAAA,EAAD,CAAM3H,UAAWD,EAAQf,KAAzB,SACKsI,EAASnD,KAAI,SAAAyD,GAAC,OAAK,qCAAE,eAACC,GAAA,EAAD,CAAUxI,WAAW,aAArB,UAClB,eAACyI,GAAA,EAAD,WACCF,EAAEG,SAAY,cAACC,GAAA,EAAD,CAAQhI,UAAWD,EAAQoH,MAA3B,SACX,cAAC,KAAD,MACS,cAACa,GAAA,EAAD,UACT,cAAC,KAAD,MAEHJ,EAAEG,SAAW,SAAU,eAExB,cAACE,GAAA,EAAD,CACIC,QAASN,EAAE5K,SACXmL,UACI,cAAC,IAAM5E,SAAP,UACI,cAAC,KAAD,CACIlG,UAAU,OACVC,QAAQ,QACR0C,UAAWD,EAAQmH,OACnB3J,MAAM,cAJV,+BAMoBqK,EAAEQ,oBAMlC,cAACC,GAAA,EAAD,CAAS/K,QAAQ,QAAQD,UAAU,kBAjCxC,cAACiL,GAAA,EAAD,ICZf,SAASC,MTxB+B,WACpC,IAAIC,EAAgB,UAAOpO,EAAP,0BAAoDA,EAApD,kBAAoFA,EAApF,yBAAmHA,EAAnH,sBAAsJA,GAC1K2C,OAAOC,SAASC,KAAOuL,ESuBvBC,GAGJ,SAASC,MTtBsC,WAC3C,IAAMrF,EAAW7I,aAAaC,QAAQ,YAClC+N,EAAgB,UAAOpO,EAAP,0BAAoDA,EAApD,kBAAoFA,EAApF,yBAAmHA,EAAnH,sBAAsJA,EAAtJ,qBAAqLiJ,GACzMtG,OAAOC,SAASC,KAAOuL,ESoBvBG,GAOJ,SAASC,MCzCuB,WAC5B,IAAIC,EAAmB,UAAOzO,EAAP,uBAAgDA,EAAhD,qBAA+EA,EAA/E,yBAAoHA,GAC3I2C,OAAOC,SAASC,KAAO4L,EDwCvBC,GAmBJ,IAiKeC,GA/JO,WAClB,MAAoC9H,IAAMC,UAAS,GAAnD,mBAAO8H,EAAP,KAAmBC,EAAnB,KACA,EAA8BhI,IAAMC,SAAS,IAA7C,mBAAgBgI,GAAhB,WACA,EAA0CjI,IAAMC,SAAS,IAAzD,mBAAsBiI,GAAtB,WAEArG,qBAAU,WACN,GVnBUtI,aAAaC,QAAQ,gBUmBT,CAClB,IAAMF,EAAUD,IACV8O,EAAiB,CACnBhN,aAAc7B,EAAQ2D,aACtB7B,cAAe9B,EAAQ8O,cACvB/M,MAAO/B,EAAQ+O,MACf/M,SAAUhC,EAAQgP,SAClB/M,WAAYjC,EAAQiP,WACpB/M,WAAYgN,SAASlP,EAAQmP,aAKjC,OAHAP,EAAiBC,GACjBF,EAAWxO,EAAcH,EAAQgP,gBACjCN,GAAc,GAIlB,IAAM9N,EAAO,IAAIwO,IAAI5M,OAAOC,SAASC,MAAM2M,aAAa5G,IAAI,QAExD7H,GACAD,EAAiBC,GACZS,MAAK,SAAAC,GACF2L,QAAQC,IAAI,wBAAyB5L,GACrCsN,EAAiBtN,EAAS,IAC1BqN,EAAWrN,EAAS,IACpBoN,GAAc,GAIEpN,EAAS,GAAGgO,OAa/BnN,OAAO,SAAAC,GACJ6K,QAAQC,IAAI,sBAAuB9K,GACnCsM,GAAc,QAG3B,IAEH,IAAIa,EVGGtP,aAAaC,QAAQ,YUFxBsP,EAAmBvP,aAAaC,QAAQ,YAExCuP,GAAO,EASX,OARIhB,IAEIgB,EADAF,IAASG,IAAaC,UAQ1B,eAAC,IAAD,WACI,eAACC,EAAA,EAAD,CAAKpG,GAAI,CAAC3E,QAAS,QAAnB,UACI,cAACgL,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACIjF,SAAS,QADb,SAGI,eAACuB,EAAA,EAAD,WACI,cAACvJ,EAAA,EAAD,CACIC,UAAU,KACVC,QAAQ,KACRC,MAAM,UACN+M,QAAM,EACNvG,GAAI,CAACwG,SAAU,GALnB,kCASCvB,EAAa,mCACV,cAACjD,EAAA,EAAD,CAAQxI,MAAM,UAAUuD,QAAS,WA7GzDlE,KA6GwB,sBAGE,qCAIlB,cAACuN,EAAA,EAAD,CACI9M,UAAU,MACV0G,GAAI,CACAgD,gBAAiB,SAACjI,GAAD,MACU,UAAvBA,EAAMc,QAAQ4K,KACR1L,EAAMc,QAAQ6K,KAAK,KACnB3L,EAAMc,QAAQ6K,KAAK,MAC7BF,SAAU,EACV/L,MAAO,CAACkM,GArGR,KAsGAxG,OAAQ,MACRyG,WAAY,CAACD,GAAI,GACjBE,SAAU,QAEd,aAAW,oBAGf,cAACT,EAAA,EAAD,CACI9M,UAAU,OACV0G,GAAI,CACAgD,gBAAiB,SAACjI,GAAD,MACU,UAAvBA,EAAMc,QAAQ4K,KACR1L,EAAMc,QAAQ6K,KAAK,KACnB3L,EAAMc,QAAQ6K,KAAK,MAC7BF,SAAU,EACVrG,OAAQ,QACR0G,SAAU,QATlB,SAYI,eAACC,EAAA,EAAD,CAAWC,SAAS,KAAK/G,GAAI,CAACgH,GAAI,EAAGC,GAAI,GAAzC,UACI,eAACxH,EAAA,EAAD,CAAMC,WAAS,EAACvE,QAAS,EAAzB,UACI,cAACsE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,IAC7BmF,EAAa,mCACV,cAAC3B,GAAD,MACE,mCACF,cAAC7D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,SACI,eAACC,EAAA,EAAD,CACIC,GAAI,CACAC,EAAG,EACH5E,QAAS,OACT6E,cAAe,SACfC,OAAQ,KALhB,UAQK6F,GAAoB,mCACjB,cAAChE,EAAA,EAAD,CAAQxI,MAAM,UAAUuD,QAAS,WAC7B4H,MADJ,8BAIJ,cAAC3C,EAAA,EAAD,CAAQxI,MAAM,UAAUuD,QAAS,WAC7ByH,MADJ,mBAGA,cAACxC,EAAA,EAAD,CAAQxI,MAAM,UAAUuD,QAAS,WAC7B8H,MADJ,6BAMZ,cAACpF,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,OAEjCmG,EAAO,mCACJ,cAAChJ,GAAD,MACE,sCEhNXiK,OANf,SAAa9N,GACT,OACI,cAAC,GAAD,KCMO+N,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxP,MAAK,YAAkD,IAA/CyP,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCPMO,QACa,cAA7B3O,OAAOC,SAAS2O,UAEa,UAA7B5O,OAAOC,SAAS2O,UAEhB5O,OAAOC,SAAS2O,SAASC,MACrB,2DCCRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SD0GlB,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMxQ,MAAK,SAAAyQ,GAC/BA,EAAaC,gBCrGzBpB,M,iBClBAqB,EAAOC,QAAU,CACbtC,SAAU,WACVuC,YAAa,cACbC,QAAS,mBACTC,MAAO,oB","file":"static/js/main.7c885970.chunk.js","sourcesContent":["export const CONFIG = {\r\n    \"TOKEN_ENDPOINT\": \"https://dev.apim.com/oauth2/token\",\r\n    \"AUTHORIZE_ENDPOINT\": \"https://dev.apim.com/oauth2/authorize\",\r\n    \"RESPONSE_TYPE\": \"code\",\r\n    \"SCOPE\": \"openid profile roles email phone consumer_scope account_info_read user_mgt_read\",\r\n    \"REDIRECT_URI\": \"https://fir-980df.web.app\",\r\n    \"CLIENT_ID\": \"q0ZI24bp0YwTPpxrlwlrnQprMq4a\",\r\n    \"CLIENT_SECRET\": \"3JjpOYMYS11tfMB2yx6ttsu7fusa\",\r\n    \"GRANT_TYPE\": \"authorization_code\",\r\n    \"CLIENT_URL\": \"https://fir-980df.web.app\",\r\n    \"LOGOUT_URL\": \"https://dev.apim.com/oidc/logout\",\r\n    \"REGISTER_ENDPOINT\": \"https://dev.apim.com/accountrecoveryendpoint/register.do\",\r\n    \"TENET_DOMAIN\": \"carbon.super\",\r\n    \"COOKIE_PATH\": \"/\",\r\n    \"GATEWAY_URL\": \"https://dev.gw.apim.com/\"\r\n};","import Cookies from \"universal-cookie\";\r\nimport { CONFIG } from \"../config\";\r\n\r\nconst cookies = new Cookies();\r\n\r\n/**\r\n * Sets a cookie when the name, value and path is passed in.\r\n *\r\n * @param cookieName - Name of the cookie.\r\n * @param cookieValue - Value of the cookie.\r\n * @param cookiePath - Path of the cookie. Defaults to \"/\".\r\n */\r\nexport function setCookie(cookieName, cookieValue, cookiePath = CONFIG.COOKIE_PATH) {\r\n    cookies.set(cookieName, cookieValue,\r\n        {\r\n            path: cookiePath,\r\n            expires: new Date(new Date().setFullYear(new Date().getFullYear() + 1)),\r\n            secure: true\r\n        },\r\n    );\r\n}\r\n\r\n/**\r\n * Removes a cookie when the name and the path is passed in.\r\n *\r\n * @param cookieName - Name of the cookie.\r\n * @param cookiePath - Path of the cookie. Defaults to \"/\".\r\n */\r\nexport function removeCookie(cookieName, cookiePath = CONFIG.COOKIE_PATH) {\r\n    cookies.remove(\r\n        cookieName,\r\n        {\r\n            path: cookiePath\r\n        }\r\n    );\r\n}\r\n\r\n/**\r\n * Retrieves a cookie.\r\n *\r\n * @param cookieName - Name of the cookie.\r\n * @return {any}\r\n */\r\nexport function getCookie(cookieName) {\r\n    return cookies.get(cookieName);\r\n}","import {getCookie, removeCookie, setCookie} from \"../helpers/cookies\";\r\nimport RoleConstant from '../Config/RoleConstant';\r\n\r\n/**\r\n * Initialize authenticated user session.\\\r\n */\r\nexport const initAuthenticatedSession = (data) => {\r\n    localStorage.setItem(\"ACCESS_TOKEN\", data.access_token);\r\n    localStorage.setItem(\"REFRESH_TOKEN\", data.refresh_token);\r\n    localStorage.setItem(\"SCOPE\", data.scope);\r\n    localStorage.setItem(\"ID_TOKEN\", data.id_token);\r\n    localStorage.setItem(\"TOKEN_TYPE\", data.token_type);\r\n    localStorage.setItem(\"EXPIRES_IN\", data.expires_in);\r\n};\r\n\r\n/**\r\n * Get session parameter from cookie storage.\r\n *\r\n * @param key\r\n * @return {string}\r\n */\r\nexport const getSessionParameter = (key) => {\r\n    //return getCookie(key);\r\n    return localStorage.getItem(key);\r\n\r\n};\r\n\r\n/**\r\n * Reset authenticated session.\r\n */\r\nexport const resetAuthenticatedSession = () => {\r\n    localStorage.removeItem(\"ACCESS_TOKEN\");\r\n    localStorage.removeItem(\"REFRESH_TOKEN\");\r\n    localStorage.removeItem(\"SCOPE\");\r\n    localStorage.removeItem(\"ID_TOKEN\");\r\n    localStorage.removeItem(\"TOKEN_TYPE\");\r\n    localStorage.removeItem(\"EXPIRES_IN\");\r\n    localStorage.removeItem(\"id\");\r\n    //localStorage.removeItem(\"username\");\r\n    localStorage.removeItem(\"firstName\");\r\n    localStorage.removeItem(\"lastName\");\r\n    localStorage.removeItem(\"email\");\r\n    localStorage.removeItem(\"mobile\");\r\n    localStorage.removeItem(\"userRole\");\r\n    localStorage.removeItem(\"code_verifier\");\r\n};\r\n\r\n/**\r\n * Returns whether session is valid.\r\n *\r\n * @return {boolean}\r\n */\r\nexport const isValidSession = () => {\r\n    const token = localStorage.getItem(\"ACCESS_TOKEN\");\r\n    return !!token;\r\n};\r\n\r\n/**\r\n * Get all session parameters.\r\n *\r\n * @returns {{}}\r\n */\r\nexport const getAllSessionParameters = () => {\r\n    const session = {};\r\n    session[\"ACCESS_TOKEN\"] = localStorage.getItem(\"ACCESS_TOKEN\");\r\n    session[\"REFRESH_TOKEN\"] = localStorage.getItem(\"REFRESH_TOKEN\");\r\n    session[\"SCOPE\"] = localStorage.getItem(\"SCOPE\");\r\n    session[\"ID_TOKEN\"] = localStorage.getItem(\"ID_TOKEN\");\r\n    session[\"TOKEN_TYPE\"] = localStorage.getItem(\"TOKEN_TYPE\");\r\n    session[\"EXPIRES_IN\"] = localStorage.getItem(\"EXPIRES_IN\");\r\n    return session;\r\n};\r\n\r\n/**\r\n * Base64 decodes the ID token\r\n *\r\n * @param token id token\r\n * @return {any}\r\n */\r\nexport const decodeIdToken = (token) => {\r\n    return JSON.parse(atob(token.split(\".\")[1]));\r\n};\r\n\r\nexport const getAllUserData = () => {\r\n    const user = {};\r\n    user[\"id\"] = localStorage.getItem(\"id\");\r\n    user[\"username\"] = localStorage.getItem(\"username\");\r\n    user[\"firstName\"] = localStorage.getItem(\"firstName\");\r\n    user[\"lastName\"] = localStorage.getItem(\"lastName\");\r\n    user[\"email\"] = localStorage.getItem(\"email\");\r\n    user[\"mobile\"] = localStorage.getItem(\"mobile\");\r\n    return user;\r\n}\r\n\r\nexport const getVerifier = () => {\r\n    return localStorage.getItem(\"code_verifier\");\r\n}\r\n\r\n\r\nexport const initAuthenticatedUserSession = (data) => {\r\n    localStorage.setItem(\"id\", data.id);\r\n    localStorage.setItem(\"username\", data.username);\r\n    localStorage.setItem(\"firstName\", data.firstName);\r\n    localStorage.setItem(\"lastName\", data.lastName);\r\n    localStorage.setItem(\"email\", data.email);\r\n    localStorage.setItem(\"mobile\", data.mobile);\r\n};\r\n\r\nexport const initAuthenticatedRoles = (data) => {\r\n    for (var i =0; i < data.length; i++){\r\n        if(RoleConstant.consumer == data[i]){\r\n            localStorage.setItem(\"userRole\", data[i]);\r\n        }\r\n        if(RoleConstant.meterReader == data[i]){\r\n            localStorage.setItem(\"userRole\", data[i]);\r\n        }\r\n        if(RoleConstant.finance == data[i]){\r\n            localStorage.setItem(\"userRole\", data[i]);\r\n        }\r\n    }\r\n}\r\n\r\nexport const getUserRole = () => {\r\n    return localStorage.getItem(\"userRole\");\r\n}\r\n\r\nexport const initpckeChallangeSession = (data) => {\r\n    localStorage.setItem(\"code_verifier\", data.code_verifier);\r\n}","import axios from \"axios\";\r\nimport {decodeIdToken, initAuthenticatedSession, initpckeChallangeSession, getVerifier} from \"./session\";\r\nimport {CONFIG} from \"../config\";\r\nimport pkceChallenge from 'pkce-challenge';\r\n\r\n/**\r\n * Sends an authorization request.\r\n */\r\nexport const sendAuthorizationRequest = () => {\r\n    let authorizeRequest = `${ CONFIG.AUTHORIZE_ENDPOINT }?response_type=${ CONFIG.RESPONSE_TYPE }&scope=${ CONFIG.SCOPE }&redirect_uri=${ CONFIG.REDIRECT_URI }&client_id=${ CONFIG.CLIENT_ID }`;\r\n    window.location.href = authorizeRequest;\r\n};\r\n\r\n\r\nexport const sendAuthorizationRequestWithOTP = () => {\r\n    const username = localStorage.getItem(\"username\");\r\n    let authorizeRequest = `${ CONFIG.AUTHORIZE_ENDPOINT }?response_type=${ CONFIG.RESPONSE_TYPE }&scope=${ CONFIG.SCOPE }&redirect_uri=${ CONFIG.REDIRECT_URI }&client_id=${ CONFIG.CLIENT_ID }&username=${ username }`;\r\n    window.location.href = authorizeRequest;\r\n};\r\n\r\n/**\r\n * Sends a token request.\r\n *\r\n * @param code Authorization code\r\n * @return {Promise<AxiosResponse<T> | never>}\r\n */\r\nexport const sendTokenRequest = (code) => {\r\n    const verifyCode = localStorage.getItem(\"code_verifier\");\r\n    const body = [];\r\n    body.push(`client_id=${ CONFIG.CLIENT_ID }`);\r\n    body.push(`client_secret=${ CONFIG.CLIENT_SECRET }`);\r\n    body.push(`code=${ code }`);\r\n    body.push(`grant_type=${ CONFIG.GRANT_TYPE }`);\r\n    body.push(`redirect_uri=${ CONFIG.REDIRECT_URI }`);\r\n    //body.push(`code_verifier=${ verifyCode }`);\r\n    axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\r\n    return axios.post(`${ CONFIG.TOKEN_ENDPOINT }`, body.join(\"&\"), getTokenRequestHeaders())\r\n        .then(response => {\r\n            if (response.status !== 200) {\r\n                return Promise.reject(new Error(\"Invalid status code received in the token response: \"\r\n                    + response.status));\r\n            }\r\n            // Store the response in the session storage\r\n            initAuthenticatedSession(response.data);\r\n\r\n            return [response.data, decodeIdToken(response.data.id_token)];\r\n\r\n        }).catch((error) => {\r\n            return Promise.reject(error);\r\n        });\r\n};\r\n\r\n/**\r\n * Helper to set request headers.\r\n *\r\n * @return {{headers: {Accept: string, \"Access-Control-Allow-Origin\": string, \"Content-Type\": string}}}\r\n */\r\nconst getTokenRequestHeaders = () => {\r\n    return {\r\n        headers: {\r\n            \"Accept\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": `${ CONFIG.CLIENT_URL }`,\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n        }\r\n    };\r\n};","import {getSessionParameter, resetAuthenticatedSession} from \"./session\";\r\nimport {CONFIG} from \"../config\";\r\n\r\n/**\r\n * Logs out from the session.\r\n */\r\nexport const dispatchLogout = () => {\r\n    const token = getSessionParameter(\"ID_TOKEN\");\r\n    // Clear the session storage\r\n    resetAuthenticatedSession();\r\n    window.location.href = `${CONFIG.LOGOUT_URL}?id_token_hint=${token}&post_logout_redirect_uri=${CONFIG.REDIRECT_URI}`;\r\n};","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nfunction Title(props) {\r\n  return (\r\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTitle.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Title;","import axios from 'axios';\r\nimport { getAllSessionParameters } from \"../actions/session\";\r\nimport {CONFIG} from \"../config\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: CONFIG.GATEWAY_URL\r\n});\r\n\r\ninstance.defaults.headers.common['Content-Type'] = 'application/json';\r\ninstance.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\r\ninstance.defaults.headers.common['Accept'] = '*/*';\r\ninstance.defaults.headers.common['Accept-Encoding'] = 'gzip, deflate, br';\r\n\r\n\r\ninstance.interceptors.request.use(function (config) {\r\n    const session = getAllSessionParameters();\r\n    const token = session.ACCESS_TOKEN;\r\n    config.headers.Authorization =  token ? `Bearer ${token}` : '';\r\n    return config;\r\n});\r\n\r\nexport default instance;\r\n","import React, {useRef, useEffect} from 'react';\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport './consumer.css';\r\nimport Title from './Title';\r\nimport Link from '@mui/material/Link';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport TextField from '@mui/material/TextField';\r\nimport {\r\n    DataGrid,\r\n    GridToolbarDensitySelector,\r\n    GridToolbarFilterButton,\r\n} from '@mui/x-data-grid';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport {createTheme} from '@mui/material/styles';\r\nimport {createStyles, makeStyles} from '@mui/styles';\r\nimport axiosConfig from '../Config/axiosConfig';\r\nimport {getAllUserData} from \"../actions/session\";\r\n\r\nconst columns = [\r\n    {field: 'id', hide: true},\r\n    {field: 'transactionId', headerName: 'Transaction ID', width: 250},\r\n    {field: 'createdBy', headerName: 'Date', width: 200, editable: false},\r\n    {field: 'method', headerName: 'Method', width: 250, editable: false},\r\n    {field: 'amount', headerName: 'Amount', width: 400, editable: false},\r\n]\r\n\r\nfunction preventDefault(event) {\r\n    event.preventDefault();\r\n}\r\n\r\nfunction escapeRegExp(value) {\r\n    return value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\nconst defaultTheme = createTheme();\r\nconst useStyles = makeStyles(\r\n    (theme) =>\r\n        createStyles({\r\n            root: {\r\n                padding: theme.spacing(0.5, 0.5, 0),\r\n                justifyContent: 'space-between',\r\n                display: 'flex',\r\n                alignItems: 'flex-start',\r\n                flexWrap: 'wrap',\r\n            },\r\n            textField: {\r\n                [theme.breakpoints.down('xs')]: {\r\n                    width: '100%',\r\n                },\r\n                margin: theme.spacing(1, 0.5, 1.5),\r\n                '& .MuiSvgIcon-root': {\r\n                    marginRight: theme.spacing(0.5),\r\n                },\r\n                '& .MuiInput-underline:before': {\r\n                    borderBottom: `1px solid ${theme.palette.divider}`,\r\n                },\r\n            },\r\n        }),\r\n    {defaultTheme},\r\n);\r\n\r\nfunction QuickSearchToolbar(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div>\r\n                <GridToolbarFilterButton/>\r\n                <GridToolbarDensitySelector/>\r\n            </div>\r\n            <TextField\r\n                variant=\"standard\"\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n                placeholder=\"Search…\"\r\n                className={classes.textField}\r\n                InputProps={{\r\n                    startAdornment: <SearchIcon fontSize=\"small\"/>,\r\n                    endAdornment: (\r\n                        <IconButton\r\n                            title=\"Clear\"\r\n                            aria-label=\"Clear\"\r\n                            size=\"small\"\r\n                            style={{visibility: props.value ? 'visible' : 'hidden'}}\r\n                            onClick={props.clearSearch}\r\n                        >\r\n                            <ClearIcon fontSize=\"small\"/>\r\n                        </IconButton>\r\n                    ),\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nQuickSearchToolbar.propTypes = {\r\n    clearSearch: PropTypes.func.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n};\r\n\r\nfunction postData(data) {\r\n\r\n    if (!data.payAmount) {\r\n        alert(\"Enter payment amount\");\r\n        return;\r\n    }\r\n    if (!data.account) {\r\n        alert(\"Select account number\");\r\n        return;\r\n    }\r\n    if (!data.payMethod) {\r\n        alert(\"Select payment method\");\r\n        return;\r\n    }\r\n\r\n    const session = getAllUserData();\r\n\r\n    var jsonData = {\r\n        \"id\": \"\",\r\n        \"transactionId\": \"\",\r\n        \"amount\": data.payAmount,\r\n        \"method\": data.payMethod,\r\n        \"invoiceAccounts\": data.account,\r\n        \"payee\": {\r\n            \"id\": session.id,\r\n            \"username\": session.username,\r\n            \"firstName\": session.firstName,\r\n            \"lastName\": session.lastName,\r\n            \"email\": session.email,\r\n            \"mobile\": session.mobile\r\n        }\r\n\r\n    };\r\n\r\n    axiosConfig.post(process.env.REACT_APP_APIM_CONSUMER_PREFIX + process.env.REACT_APP_API_PREFIX + '/consumer/payments', jsonData)\r\n        .then(function (response) {\r\n            alert(\"payment success\");\r\n            window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n            alert(error);\r\n        });\r\n}\r\n\r\nexport default function Consumer() {\r\n    const [account, setAccount] = React.useState(\"\");\r\n    const [searchText, setSearchText] = React.useState('');\r\n    const [invoices, setInvoices] = React.useState([]);\r\n    const [rows, setRows] = React.useState([]);\r\n    const valueRef = useRef('');\r\n    const [selection, setSelection] = React.useState();\r\n    const [userAccounts, setUserAccounts] = React.useState([]);\r\n\r\n\r\n    const updateSelection = (event, value) => {\r\n        setSelection(value);\r\n    };\r\n\r\n    const requestSearch = (searchValue) => {\r\n        setSearchText(searchValue);\r\n        const searchRegex = new RegExp(escapeRegExp(searchValue), 'i');\r\n        const filteredRows = invoices.filter((row) => {\r\n            return Object.keys(row).some((field) => {\r\n                return searchRegex.test(row[field].toString());\r\n            });\r\n        });\r\n        setRows(filteredRows);\r\n    };\r\n\r\n    function clickAccountNumber(account) {\r\n        axiosConfig.get(process.env.REACT_APP_APIM_ACCOUNT_PREFIX + process.env.REACT_APP_API_PREFIX + '/account', {\r\n            params: {\r\n                mobile_number: '',\r\n                account_number: account.accountNumber\r\n            }\r\n        })\r\n            .then(function (response) {\r\n                setAccount(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                alert(error);\r\n            });\r\n        axiosConfig.get(process.env.REACT_APP_APIM_CONSUMER_PREFIX + process.env.REACT_APP_API_PREFIX + '/consumer/invoices', {\r\n            params: {\r\n                account_number: account.accountNumber,\r\n                username: ''\r\n            }\r\n        })\r\n            .then(function (response) {\r\n                setInvoices(response.data);\r\n                setRows(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                alert(error);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        const session = getAllUserData();\r\n        axiosConfig.get(process.env.REACT_APP_APIM_CONSUMER_PREFIX + process.env.REACT_APP_API_PREFIX + '/consumer/accounts', {params: {username: session.username}})\r\n            .then(function (response) {\r\n                setUserAccounts(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                alert(error);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} md={4} lg={3}>\r\n                    <Paper\r\n                        sx={{\r\n                            p: 2,\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            height: 240,\r\n                        }}\r\n                    >\r\n                        <Title>Account List</Title>\r\n                        <ul>\r\n                            {userAccounts.map(function (d, idx) {\r\n                                return (<li key={idx}\r\n                                            onClick={() =>\r\n                                                clickAccountNumber(d)\r\n                                            }>{d.accountNumber}</li>)\r\n                            })}\r\n                        </ul>\r\n                    </Paper>\r\n                </Grid>\r\n                {/* Recent Deposits */}\r\n                <Grid item xs={12} md={4} lg={3}>\r\n                    <Paper\r\n                        sx={{\r\n                            p: 2,\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            height: 240,\r\n                        }}\r\n                    >\r\n                        <React.Fragment>\r\n                            <Title>Outstanding</Title>\r\n                            <Typography component=\"p\" variant=\"h4\">\r\n                                ${account.outstandAmount}\r\n                            </Typography>\r\n                            <Typography color=\"text.secondary\" sx={{flex: 1}}>\r\n                                ${account.lastModifiedDate}\r\n                            </Typography>\r\n                        </React.Fragment>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12} md={5} lg={4}>\r\n                    <Paper\r\n                        sx={{\r\n                            p: 2,\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            height: 240,\r\n                        }}\r\n                    >\r\n                        <React.Fragment>\r\n                            <FormLabel>Selected Account : {account.accountNumber} </FormLabel>\r\n                            <InputLabel htmlFor=\"outlined-adornment-amount\">Amount</InputLabel>\r\n                            <OutlinedInput\r\n                                id=\"outlined-adornment-amount\"\r\n                                startAdornment={<InputAdornment position=\"start\">Rs</InputAdornment>}\r\n                                label=\"Amount\"\r\n                                inputRef={valueRef}\r\n                            />\r\n                            <FormLabel component=\"legend\">Payment Methods</FormLabel>\r\n                            <RadioGroup name=\"value\" row aria-label=\"paymentMethods\"\r\n                                        name=\"row-radio-buttons-group\" value={selection}\r\n                                        onChange={updateSelection}>\r\n                                <FormControlLabel value=\"visa\" control={<Radio/>} label=\"Visa\"/>\r\n                                <FormControlLabel value=\"master\" control={<Radio/>} label=\"Master\"/>\r\n                                <FormControlLabel value=\"easyCash\" control={<Radio/>} label=\"easyCash\"/>\r\n                            </RadioGroup>\r\n                            <Stack direction=\"row\" spacing={2}>\r\n                                <Button variant=\"contained\" onClick={() => {\r\n                                    postData({\r\n                                        payAmount: valueRef.current.value,\r\n                                        payMethod: selection,\r\n                                        account: account\r\n                                    })\r\n                                }}>Pay</Button>\r\n                            </Stack>\r\n                        </React.Fragment>\r\n                    </Paper>\r\n                </Grid>\r\n                {/* Recent Orders */}\r\n                <Grid item xs={12}>\r\n                    <Paper sx={{p: 2, display: 'flex', flexDirection: 'column'}}>\r\n                        <React.Fragment>\r\n                            <Title>Recent Payments</Title>\r\n                            <div style={{height: 400, width: '100%'}}>\r\n                                <DataGrid\r\n                                    components={{Toolbar: QuickSearchToolbar}}\r\n                                    rows={rows}\r\n                                    columns={columns}\r\n                                    componentsProps={{\r\n                                        toolbar: {\r\n                                            value: searchText,\r\n                                            onChange: (event) => requestSearch(event.target.value),\r\n                                            clearSearch: () => requestSearch(''),\r\n                                        },\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </React.Fragment>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport TextField from '@mui/material/TextField';\r\nimport {\r\n    DataGrid,\r\n    GridToolbarDensitySelector,\r\n    GridToolbarFilterButton,\r\n} from '@mui/x-data-grid';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport {createTheme} from '@mui/material/styles';\r\nimport {createStyles, makeStyles} from '@mui/styles';\r\nimport axiosConfig from '../Config/axiosConfig';\r\n\r\nconst columns = [\r\n    {field: 'id', hide: true},\r\n    {field: 'transactionId', headerName: 'Transaction ID', width: 150},\r\n    {field: 'invoiceAccounts', headerName: 'Account', width: 150},\r\n    {field: 'firstName', headerName: 'Holder First Name', width: 150, editable: false},\r\n    {field: 'lastName', headerName: 'Holder Last Name', width: 150, editable: false},\r\n    {field: 'lastModifiedDate', headerName: 'Date', width: 200, editable: false},\r\n    {field: 'method', headerName: 'Method', width: 100, editable: false},\r\n    {field: 'payeeFirstName', headerName: 'Payee First Name', width: 150, editable: false},\r\n    {field: 'payeeLastName', headerName: 'Payee Last Name', width: 150, editable: false},\r\n    {field: 'amount', headerName: 'Amount', width: 150, editable: false},\r\n]\r\n\r\nfunction escapeRegExp(value) {\r\n    return value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\nconst defaultTheme = createTheme();\r\nconst useStyles = makeStyles(\r\n    (theme) =>\r\n        createStyles({\r\n            root: {\r\n                padding: theme.spacing(0.5, 0.5, 0),\r\n                justifyContent: 'space-between',\r\n                display: 'flex',\r\n                alignItems: 'flex-start',\r\n                flexWrap: 'wrap',\r\n            },\r\n            textField: {\r\n                [theme.breakpoints.down('xs')]: {\r\n                    width: '100%',\r\n                },\r\n                margin: theme.spacing(1, 0.5, 1.5),\r\n                '& .MuiSvgIcon-root': {\r\n                    marginRight: theme.spacing(0.5),\r\n                },\r\n                '& .MuiInput-underline:before': {\r\n                    borderBottom: `1px solid ${theme.palette.divider}`,\r\n                },\r\n            },\r\n        }),\r\n    {defaultTheme},\r\n);\r\n\r\nfunction QuickSearchToolbar(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div>\r\n                <GridToolbarFilterButton/>\r\n                <GridToolbarDensitySelector/>\r\n            </div>\r\n            <TextField\r\n                variant=\"standard\"\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n                placeholder=\"Search…\"\r\n                className={classes.textField}\r\n                InputProps={{\r\n                    startAdornment: <SearchIcon fontSize=\"small\"/>,\r\n                    endAdornment: (\r\n                        <IconButton\r\n                            title=\"Clear\"\r\n                            aria-label=\"Clear\"\r\n                            size=\"small\"\r\n                            style={{visibility: props.value ? 'visible' : 'hidden'}}\r\n                            onClick={props.clearSearch}\r\n                        >\r\n                            <ClearIcon fontSize=\"small\"/>\r\n                        </IconButton>\r\n                    ),\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nQuickSearchToolbar.propTypes = {\r\n    clearSearch: PropTypes.func.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function History() {\r\n\r\n    const [invoices, setInvoices] = React.useState([]);\r\n    const [rows, setRows] = React.useState([]);\r\n\r\n    useEffect(() => {\r\n        axiosConfig.get('/controller/invoices', {params: {username: '', account_number: '' }})\r\n            .then(function (response) {\r\n                setRows(response.data);\r\n                setInvoices(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                alert(error)\r\n            });\r\n        //setIsLoaded(true);\r\n    }, []);\r\n\r\n    const [searchText, setSearchText] = React.useState('');\r\n\r\n    const requestSearch = (searchValue) => {\r\n        setSearchText(searchValue);\r\n        const searchRegex = new RegExp(escapeRegExp(searchValue), 'i');\r\n        const filteredRows = invoices.filter((row) => {\r\n            return Object.keys(row).some((field) => {\r\n                return searchRegex.test(row[field].toString());\r\n            });\r\n        });\r\n        setRows(filteredRows);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        setRows(invoices);\r\n    }, [invoices]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div style={{height: 400, width: '100%'}}>\r\n                <DataGrid\r\n                    components={{Toolbar: QuickSearchToolbar}}\r\n                    rows={rows}\r\n                    columns={columns}\r\n                    componentsProps={{\r\n                        toolbar: {\r\n                            value: searchText,\r\n                            onChange: (event) => requestSearch(event.target.value),\r\n                            clearSearch: () => requestSearch(''),\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}","import React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport TextField from '@mui/material/TextField';\r\nimport {\r\n  DataGrid,\r\n  GridToolbarDensitySelector,\r\n  GridToolbarFilterButton,\r\n} from '@mui/x-data-grid';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { createTheme } from '@mui/material/styles';\r\nimport { createStyles, makeStyles } from '@mui/styles';\r\nimport axiosConfig from '../Config/axiosConfig';\r\n\r\nconst columns = [\r\n    {field: 'id', hide: true},\r\n    {field: 'lastModifiedDate', headerName: 'Date', width: 200},\r\n    {field: 'unitAccounts', headerName: 'Account', width: 150},\r\n    {field: 'firstName', headerName: 'Holder First Name', width: 150},\r\n    {field: 'lastName', headerName: 'Holder Last Name', width: 150},\r\n    {field: 'month', headerName: 'Month', width: 100, editable: false},\r\n    {field: 'unit', headerName: 'Units', width: 100, editable: false},\r\n    {field: 'amount', headerName: 'Amount', width: 200, editable: false},\r\n]\r\n\r\nfunction escapeRegExp(value) {\r\n  return value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\nconst defaultTheme = createTheme();\r\nconst useStyles = makeStyles(\r\n    (theme) =>\r\n        createStyles({\r\n          root: {\r\n            padding: theme.spacing(0.5, 0.5, 0),\r\n            justifyContent: 'space-between',\r\n            display: 'flex',\r\n            alignItems: 'flex-start',\r\n            flexWrap: 'wrap',\r\n          },\r\n          textField: {\r\n            [theme.breakpoints.down('xs')]: {\r\n              width: '100%',\r\n            },\r\n            margin: theme.spacing(1, 0.5, 1.5),\r\n            '& .MuiSvgIcon-root': {\r\n              marginRight: theme.spacing(0.5),\r\n            },\r\n            '& .MuiInput-underline:before': {\r\n              borderBottom: `1px solid ${theme.palette.divider}`,\r\n            },\r\n          },\r\n        }),\r\n    { defaultTheme },\r\n);\r\n\r\nfunction QuickSearchToolbar(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <div className={classes.root}>\r\n        <div>\r\n          <GridToolbarFilterButton />\r\n          <GridToolbarDensitySelector />\r\n        </div>\r\n        <TextField\r\n            variant=\"standard\"\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n            placeholder=\"Search…\"\r\n            className={classes.textField}\r\n            InputProps={{\r\n              startAdornment: <SearchIcon fontSize=\"small\" />,\r\n              endAdornment: (\r\n                  <IconButton\r\n                      title=\"Clear\"\r\n                      aria-label=\"Clear\"\r\n                      size=\"small\"\r\n                      style={{ visibility: props.value ? 'visible' : 'hidden' }}\r\n                      onClick={props.clearSearch}\r\n                  >\r\n                    <ClearIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n              ),\r\n            }}\r\n        />\r\n      </div>\r\n  );\r\n}\r\n\r\n\r\nQuickSearchToolbar.propTypes = {\r\n  clearSearch: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function Units() {\r\n\r\n    const [units, setUnits] = React.useState([]);\r\n    const [rows, setRows] = React.useState([]);\r\n\r\n    useEffect(() => {\r\n        axiosConfig.get('/controller/readings', {params: {account_no: ''}})\r\n            .then(function (response) {\r\n                setRows(response.data);\r\n                setUnits(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                alert(error)\r\n            });\r\n        //setIsLoaded(true);\r\n    }, []);\r\n\r\n  const [searchText, setSearchText] = React.useState('');\r\n\r\n  const requestSearch = (searchValue) => {\r\n    setSearchText(searchValue);\r\n    const searchRegex = new RegExp(escapeRegExp(searchValue), 'i');\r\n    const filteredRows = units.filter((row) => {\r\n      return Object.keys(row).some((field) => {\r\n        return searchRegex.test(row[field].toString());\r\n      });\r\n    });\r\n    setRows(filteredRows);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setRows(units);\r\n  }, [units]);\r\n\r\n  return (\r\n      <React.Fragment>\r\n        <div style={{ height: 400, width: '100%' }}>\r\n          <DataGrid\r\n              components={{ Toolbar: QuickSearchToolbar }}\r\n              rows={rows}\r\n              columns={columns}\r\n              componentsProps={{\r\n                toolbar: {\r\n                  value: searchText,\r\n                  onChange: (event) => requestSearch(event.target.value),\r\n                  clearSearch: () => requestSearch(''),\r\n                },\r\n              }}\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n  );\r\n}","import React, {useRef} from 'react';\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport Typography from '@mui/material/Typography';\r\nimport Title from './Title';\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\nimport {SearchOutlined} from '@material-ui/icons';\r\nimport {TextField, IconButton} from '@material-ui/core';\r\nimport {fetchUnitsByAccountNumber, fetchAccountsByAccountNumber} from './api/fetchUnitsByAccountNumber';\r\nimport axiosConfig from '../Config/axiosConfig';\r\nimport {unitSave} from './api/unitSave';\r\nimport {getAllUserData} from \"../actions/session\";\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport Input from '@mui/material/Input';\r\n\r\n\r\n\r\nimport Link from '@mui/material/Link';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    DataGrid,\r\n    GridToolbarDensitySelector,\r\n    GridToolbarFilterButton,\r\n} from '@mui/x-data-grid';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport {createTheme} from '@mui/material/styles';\r\nimport {createStyles, makeStyles} from '@mui/styles';\r\n\r\nfunction saveUnit(data) {\r\n\r\n    if (!data.units) {\r\n        alert(\"enter current units\");\r\n        return;\r\n    }\r\n    if (!data.account) {\r\n        alert(\"Search account\");\r\n        return;\r\n    }\r\n\r\n    const session = getAllUserData();\r\n\r\n    var date = new Date();\r\n    var month = new Array();\r\n    month[0] = \"January\";\r\n    month[1] = \"February\";\r\n    month[2] = \"March\";\r\n    month[3] = \"April\";\r\n    month[4] = \"May\";\r\n    month[5] = \"June\";\r\n    month[6] = \"July\";\r\n    month[7] = \"August\";\r\n    month[8] = \"September\";\r\n    month[9] = \"October\";\r\n    month[10] = \"November\";\r\n    month[11] = \"December\";\r\n\r\n    var jsonData = {\r\n        \"id\": \"\",\r\n        \"month\": month[date.getMonth()],\r\n        \"unit\": data.units,\r\n        \"amount\": data.amount,\r\n        \"unitAccounts\": data.account,\r\n        \"meterReader\": {\r\n            \"id\": session.id,\r\n            \"username\": session.username,\r\n            \"firstName\": session.firstName,\r\n            \"lastName\": session.lastName,\r\n            \"email\": session.email,\r\n            \"mobile\": session.mobile\r\n        }\r\n    };\r\n\r\n    axiosConfig.post('/meter-readings', jsonData)\r\n        .then(function (response) {\r\n            alert(\"Save Success\");\r\n            window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n            alert(error);\r\n        });\r\n    unitSave(data);\r\n}\r\n\r\nfunction preventDefault(event) {\r\n    event.preventDefault();\r\n}\r\n\r\nfunction escapeRegExp(value) {\r\n    return value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\nconst defaultTheme = createTheme();\r\nconst useStyles = makeStyles(\r\n    (theme) =>\r\n        createStyles({\r\n            root: {\r\n                padding: theme.spacing(0.5, 0.5, 0),\r\n                justifyContent: 'space-between',\r\n                display: 'flex',\r\n                alignItems: 'flex-start',\r\n                flexWrap: 'wrap',\r\n            },\r\n            textField: {\r\n                [theme.breakpoints.down('xs')]: {\r\n                    width: '100%',\r\n                },\r\n                margin: theme.spacing(1, 0.5, 1.5),\r\n                '& .MuiSvgIcon-root': {\r\n                    marginRight: theme.spacing(0.5),\r\n                },\r\n                '& .MuiInput-underline:before': {\r\n                    borderBottom: `1px solid ${theme.palette.divider}`,\r\n                },\r\n            },\r\n        }),\r\n    {defaultTheme},\r\n);\r\n\r\nconst columns = [\r\n    {field: 'id', hide: true},\r\n    {field: 'unitAccounts', headerName: 'Account', width: 150},\r\n    {field: 'month', headerName: 'Month', width: 150, editable: false},\r\n    {field: 'unit', headerName: 'Readings', width: 150, editable: false},\r\n    {field: 'amount', headerName: 'Amount', width: 150, editable: false},\r\n    {field: 'lastModifiedDate', headerName: 'Date', width: 400, editable: false},\r\n]\r\n\r\nfunction QuickSearchToolbar(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div>\r\n                <GridToolbarFilterButton/>\r\n                <GridToolbarDensitySelector/>\r\n            </div>\r\n            <TextField\r\n                variant=\"standard\"\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n                placeholder=\"Search…\"\r\n                className={classes.textField}\r\n                InputProps={{\r\n                    startAdornment: <SearchIcon fontSize=\"small\"/>,\r\n                    endAdornment: (\r\n                        <IconButton\r\n                            title=\"Clear\"\r\n                            aria-label=\"Clear\"\r\n                            size=\"small\"\r\n                            style={{visibility: props.value ? 'visible' : 'hidden'}}\r\n                            onClick={props.clearSearch}\r\n                        >\r\n                            <ClearIcon fontSize=\"small\"/>\r\n                        </IconButton>\r\n                    ),\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nQuickSearchToolbar.propTypes = {\r\n    clearSearch: PropTypes.func.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n};\r\n\r\n\r\n\r\nexport default function MeterReader() {\r\n    const [query, setQuery] = React.useState('');\r\n    const [value, setValue] = React.useState('');\r\n    const [lastUnit, setLastUnit] = React.useState('');\r\n    const [searchText, setSearchText] = React.useState('');\r\n    const [readings, setReadings] = React.useState([]);\r\n    const [rows, setRows] = React.useState([]);\r\n    const [selection, setSelection] = React.useState();\r\n    const [account, setAccount] = React.useState('');\r\n    const valueRef = useRef('');\r\n    const amountRef = useRef('');\r\n\r\n\r\n    function fvalueCal(value) {\r\n        setValue(value * 2);\r\n    }\r\n\r\n    const valuecal = async (e) => {\r\n            console.log(e);\r\n            console.log(value);\r\n    }\r\n\r\n    const search = async (e) => {\r\n        if (e.key === 'Enter') {\r\n            axiosConfig.get('/account', {params: {mobile_number: '', account_number: query}})\r\n                .then(function (response) {\r\n                    setAccount(response);\r\n                    axiosConfig.get('/meter-readings', {\r\n                        params: {\r\n                            account_no: query\r\n                        }\r\n                    })\r\n                        .then(function (response) {\r\n                            setLastUnit(response);\r\n                            axiosConfig.get('/controller/readings', {\r\n                                params: {\r\n                                    account_no: query\r\n                                }\r\n                            })\r\n                                .then(function (response) {\r\n                                    console.log(response);\r\n                                    setReadings(response.data);\r\n                                    setRows(response.data);\r\n                                    setQuery('');\r\n                                })\r\n                                .catch(function (error) {\r\n                                    console.log(error);\r\n                                });\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.log(error);\r\n                        });\r\n                })\r\n                .catch(function (error) {\r\n                    alert(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    const updateSelection = (event, value) => {\r\n        setSelection(value);\r\n    };\r\n\r\n    const requestSearch = (searchValue) => {\r\n        setSearchText(searchValue);\r\n        const searchRegex = new RegExp(escapeRegExp(searchValue), 'i');\r\n        const filteredRows = readings.filter((row) => {\r\n            return Object.keys(row).some((field) => {\r\n                return searchRegex.test(row[field].toString());\r\n            });\r\n        });\r\n        setRows(filteredRows);\r\n    };\r\n\r\n    console.log(value);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container spacing={3}>\r\n                {/* Recent Orders */}\r\n                <Grid item xs={12} md={5} lg={4}>\r\n                    <Paper sx={{\r\n                        p: 2,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        height: 180,\r\n                    }}>\r\n                        <React.Fragment>\r\n                            <Title>Search Account</Title>\r\n                            <TextField\r\n                                id=\"standard-search\"\r\n                                label=\"Search by Account\"\r\n                                type=\"search\"\r\n                                variant=\"standard\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <IconButton>\r\n                                            <SearchOutlined onClick={console.log(\"clicked \")}/>\r\n                                        </IconButton>\r\n                                    ),\r\n                                }}\r\n                                onChange={(e) => setQuery(e.target.value)}\r\n                                onKeyPress={search}\r\n                            />\r\n                        </React.Fragment>\r\n                    </Paper>\r\n                </Grid>\r\n                {/* Chart */}\r\n                <Grid item xs={12} md={5} lg={4}>\r\n                    <Paper\r\n                        sx={{\r\n                            p: 2,\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            height: 260,\r\n                        }}\r\n                    >\r\n                        <React.Fragment>\r\n                            <Title>Last Entered Readings</Title>\r\n                            <Typography component=\"p\" variant=\"h4\" sx={{flex: 1}}>\r\n                                {lastUnit && (lastUnit.data.unit)}\r\n                            </Typography>\r\n                            <Typography color=\"text.secondary\">\r\n                                Month : {lastUnit && (lastUnit.data.month)}\r\n                            </Typography>\r\n                            <Typography color=\"text.secondary\">\r\n                                Account Number : {account && (account.data.accountNumber)}\r\n                            </Typography>\r\n                            <Typography color=\"text.secondary\">\r\n                                Owner Name : {account && (account.data.consumerFirstName + ' '+  account.data.consumerLastName)}\r\n                            </Typography>\r\n                            <div>\r\n                                <Typography component=\"p\" variant=\"p\">\r\n                                    Due Amount : Rs {lastUnit && (lastUnit.data.amount)}\r\n                                </Typography>\r\n                            </div>\r\n                        </React.Fragment>\r\n                    </Paper>\r\n                </Grid>\r\n                {/* Recent Deposits */}\r\n                <Grid item xs={12} md={5} lg={4}>\r\n                    <Paper\r\n                        sx={{\r\n                            p: 2,\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            height: 260,\r\n                        }}\r\n                    >\r\n                        <Title>Enter Reading Details</Title>\r\n                        <TextField\r\n                            id=\"outlined-number\"\r\n                            label=\"Enter current units\"\r\n                            type=\"number\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            sx={{flex: 1}}\r\n                            inputRef={valueRef}\r\n                            onChange={(e) => fvalueCal(e.target.value)}\r\n                        />\r\n                        <Typography color=\"text.secondary\" sx={{flex: 1}}>\r\n                        </Typography>\r\n                        <InputLabel htmlFor=\"standard-adornment-amount\"></InputLabel>\r\n                        <Input\r\n                            id=\"standard-adornment-amount\"\r\n                            label=\"amount\"\r\n                            inputRef={amountRef}\r\n                            startAdornment={<InputAdornment position=\"start\">Rs</InputAdornment>}\r\n                            value={value}\r\n                        />\r\n                        <Typography color=\"text.secondary\" sx={{flex: 1}}>\r\n                        </Typography>\r\n                        <Stack direction=\"row\" spacing={2}>\r\n                            <Button variant=\"contained\" onClick={() => {\r\n                                saveUnit(\r\n                                    {\r\n                                        units: valueRef.current.value,\r\n                                        account: account.data,\r\n                                        amount: amountRef.current.value\r\n                                    }\r\n                                )\r\n                            }}>Save</Button>\r\n                        </Stack>\r\n\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Paper sx={{p: 2, display: 'flex', flexDirection: 'column'}}>\r\n                        <React.Fragment>\r\n                            <Title>Reading History</Title>\r\n                            <div style={{height: 400, width: '100%'}}>\r\n                                <DataGrid\r\n                                    components={{Toolbar: QuickSearchToolbar}}\r\n                                    rows={rows}\r\n                                    columns={columns}\r\n                                    componentsProps={{\r\n                                        toolbar: {\r\n                                            value: searchText,\r\n                                            onChange: (event) => requestSearch(event.target.value),\r\n                                            clearSearch: () => requestSearch(''),\r\n                                        },\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </React.Fragment>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from '@mui/system';\nimport Check from '@material-ui/icons/Check';\nimport { green, pink } from '@material-ui/core/colors';\nimport axiosConfig from '../Config/axiosConfig';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        backgroundColor: theme.palette.background.paper,\n    },\n    inline: {\n        display: 'inline',\n    },\n    green: {\n        color: theme.palette.getContrastText(green[500]),\n        backgroundColor: green[500],\n      },\n}));\n\nexport default function TrainSchedule() {\n    const classes = useStyles();\n    const [schedule, setSchedule] = useState(null);\n    useEffect(() => {\n        axiosConfig.get('/information/1.0.5/sheds', {params: {}})\n            .then(function (response) {\n                console.log(response.data);\n                setSchedule(response.data);\n            })\n            .catch(function (error) {\n                alert(error)\n            });\n        //setIsLoaded(true);\n    }, []);\n    if(!schedule) {\n        return <CircularProgress />\n    }\n    return (\n        <>\n            <Box pb={2}>\n                <Typography variant=\"h3\">Train Schedule</Typography>\n            </Box>\n            <List className={classes.root}>\n                {schedule.map(s => (<><ListItem alignItems=\"flex-start\">\n                    <ListItemAvatar>\n                    {s.isActive ? (<Avatar className={classes.green}>\n                        <Check />\n                    </Avatar>): (<Avatar>\n                        <Check />\n                    </Avatar>)}\n                    {s.isActive ? 'Active': 'In-active'}\n                    </ListItemAvatar>\n                    <ListItemText\n                        primary={s.location}\n                        secondary={\n                            <React.Fragment>\n                                <Typography\n                                    component=\"span\"\n                                    variant=\"body2\"\n                                    className={classes.inline}\n                                    color=\"textPrimary\"\n                                >\n                                    {` Commenced: ${s.commenced}`}\n                                </Typography>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                    <Divider variant=\"inset\" component=\"li\" />\n                </>))}\n            </List>\n        </>\n    );\n}\n","import React, {useEffect} from 'react';\r\nimport {sendAuthorizationRequest, sendTokenRequest, sendAuthorizationRequestWithOTP} from \"./actions/sign-in\";\r\nimport {dispatchLogout} from \"./actions/sign-out\";\r\nimport {sendRegistration} from \"./actions/register\";\r\nimport {\r\n    isValidSession,\r\n    getAllSessionParameters,\r\n    decodeIdToken,\r\n    initAuthenticatedUserSession,\r\n    initAuthenticatedRoles,\r\n    getUserRole\r\n} from \"./actions/session\";\r\nimport pkceChallenge from 'pkce-challenge';\r\nimport {BrowserRouter, Route, Routes} from 'react-router-dom';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport {Container} from \"@mui/material\";\r\nimport Button from '@mui/material/Button';\r\nimport Consumer from './Consumer/Consumer';\r\nimport FinancialAdvisor from './FinanacialAdvisor/FinancialAdvisor';\r\nimport MeterReader from './MeterReader/MeterReader';\r\nimport Form from './Form/Form';\r\nimport './DashBoard/Dashboard.css';\r\nimport axiosConfig from './Config/axiosConfig';\r\nimport axios from 'axios';\r\nimport RoleConstant from './Config/RoleConstant';\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport TrainSchedule from './TrainSchedule/TrainSchedule';\r\n\r\nfunction loginClick() {\r\n    sendAuthorizationRequest();\r\n}\r\n\r\nfunction loginWithOTPClick() {\r\n    sendAuthorizationRequestWithOTP();\r\n}\r\n\r\nfunction logOutClick() {\r\n    dispatchLogout();\r\n}\r\n\r\nfunction registerClick() {\r\n    sendRegistration();\r\n}\r\n\r\nfunction getRole(data) {\r\n    for (var i = 0; i < data.length; i++) {\r\n        switch (data) {\r\n            case RoleConstant.consumer:\r\n                break;\r\n            case RoleConstant.meterReader:\r\n                break;\r\n            case RoleConstant.finance:\r\n                break;\r\n            case RoleConstant.admin:\r\n                break;\r\n        }\r\n        return data[i];\r\n    }\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst MainDashBoard = () => {\r\n    const [isLoggedIn, setIsLoggedIn] = React.useState(false);\r\n    const [idToken, setIdToken] = React.useState({});\r\n    const [tokenResponse, setTokenResponse] = React.useState({});\r\n\r\n    useEffect(() => {\r\n        if (isValidSession()) {\r\n            const session = getAllSessionParameters();\r\n            const _tokenResponse = {\r\n                access_token: session.ACCESS_TOKEN,\r\n                refresh_token: session.REFRESH_TOKEN,\r\n                scope: session.SCOPE,\r\n                id_token: session.ID_TOKEN,\r\n                token_type: session.TOKEN_TYPE,\r\n                expires_in: parseInt(session.EXPIRES_IN),\r\n            };\r\n            setTokenResponse(_tokenResponse);\r\n            setIdToken(decodeIdToken(session.ID_TOKEN));\r\n            setIsLoggedIn(true);\r\n            return;\r\n        }\r\n\r\n        const code = new URL(window.location.href).searchParams.get(\"code\");\r\n\r\n        if (code) {\r\n            sendTokenRequest(code)\r\n                .then(response => {\r\n                    console.log(\"TOKEN REQUEST SUCCESS\", response);\r\n                    setTokenResponse(response[0]);\r\n                    setIdToken(response[1]);\r\n                    setIsLoggedIn(true);\r\n                    // initAuthenticatedRoles(response[1].groups);\r\n                    var jsonData = {\r\n                        \"id\": \"\",\r\n                        \"username\": response[1].sub,\r\n                    };\r\n                    // axiosConfig.get(process.env.REACT_APP_APIM_USERS_PREFIX + process.env.REACT_APP_API_PREFIX + '/users', {params: {username: jsonData.username}})\r\n                    //     .then(function (response) {\r\n                    //         localStorage.setItem('username', response.data.username);\r\n                    //         initAuthenticatedUserSession(response.data);\r\n                    //         window.location.replace('/');\r\n                    //     })\r\n                    //     .catch(function (error) {\r\n                    //         console.log(error);\r\n                    //     });\r\n\r\n                })\r\n                .catch((error => {\r\n                    console.log(\"TOKEN REQUEST ERROR\", error);\r\n                    setIsLoggedIn(false);\r\n                }));\r\n        }\r\n    }, []);\r\n\r\n    let role = getUserRole();\r\n    let userInLocalStore = localStorage.getItem(\"username\");\r\n\r\n    let form = false;\r\n    if (isLoggedIn) {\r\n        if (role === RoleConstant.consumer) {\r\n            form = true;\r\n        } else {\r\n            form = false;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <Box sx={{display: 'flex'}}>\r\n                <CssBaseline/>\r\n                <AppBar\r\n                    position=\"fixed\"\r\n                >\r\n                    <Toolbar>\r\n                        <Typography\r\n                            component=\"h1\"\r\n                            variant=\"h6\"\r\n                            color=\"inherit\"\r\n                            noWrap\r\n                            sx={{flexGrow: 1}}\r\n                        >\r\n                           Consumer Dashboardxx\r\n                        </Typography>\r\n                        {isLoggedIn ? <>\r\n                            <Button color=\"inherit\" onClick={() => {\r\n                                logOutClick()\r\n                            }}>Logout</Button>\r\n                        </> : <></>}\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n            <Box\r\n                component=\"nav\"\r\n                sx={{\r\n                    backgroundColor: (theme) =>\r\n                        theme.palette.mode === 'light'\r\n                            ? theme.palette.grey[100]\r\n                            : theme.palette.grey[900],\r\n                    flexGrow: 1,\r\n                    width: {sm: drawerWidth},\r\n                    height: '9vh',\r\n                    flexShrink: {sm: 0},\r\n                    overflow: 'auto'\r\n                }}\r\n                aria-label=\"mailbox folders\"\r\n            >\r\n            </Box>\r\n            <Box\r\n                component=\"main\"\r\n                sx={{\r\n                    backgroundColor: (theme) =>\r\n                        theme.palette.mode === 'light'\r\n                            ? theme.palette.grey[100]\r\n                            : theme.palette.grey[900],\r\n                    flexGrow: 1,\r\n                    height: '100vh',\r\n                    overflow: 'auto',\r\n                }}\r\n            >\r\n                <Container maxWidth=\"lg\" sx={{mt: 4, mb: 4}}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={5} lg={4}></Grid>\r\n                        {isLoggedIn ? <>\r\n                            <TrainSchedule />\r\n                        </> : <>\r\n                            <Grid item xs={12} md={5} lg={4}>\r\n                                <Paper\r\n                                    sx={{\r\n                                        p: 2,\r\n                                        display: 'flex',\r\n                                        flexDirection: 'column',\r\n                                        height: 240,\r\n                                    }}\r\n                                >\r\n                                    {userInLocalStore && <>\r\n                                        <Button color=\"inherit\" onClick={() => {\r\n                                            loginWithOTPClick()\r\n                                        }}>Login With OTP</Button>\r\n                                    </>}\r\n                                    <Button color=\"inherit\" onClick={() => {\r\n                                        loginClick()\r\n                                    }}>Login</Button>\r\n                                    <Button color=\"inherit\" onClick={() => {\r\n                                        registerClick()\r\n                                    }}>Register</Button>\r\n                                </Paper>\r\n                            </Grid>\r\n                        </>}\r\n                        <Grid item xs={12} md={5} lg={4}></Grid>\r\n                    </Grid>\r\n                    {form ? <>\r\n                        <Consumer/>\r\n                    </> : <></>}\r\n                </Container>\r\n            </Box>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default MainDashBoard;","import {CONFIG} from \"../config\";\r\n\r\n\r\nexport const sendRegistration = () => {\r\n    let registrationRequest = `${ CONFIG.REGISTER_ENDPOINT }?&client_id=${ CONFIG.CLIENT_ID }&callback=${ CONFIG.REDIRECT_URI}&tenantDomain=${ CONFIG.TENET_DOMAIN}`;\r\n    window.location.href = registrationRequest;\r\n}\r\n\r\n","import './App.css';\nimport * as React from 'react';\nimport MainashBoard from './DashBoard';\n\nfunction App(props) {\n    return (\n        <MainashBoard />\n    );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = {\r\n    consumer: 'Consumer',\r\n    meterReader: 'MeterReader',\r\n    finance: 'FinancialAdvisor',\r\n    admin: 'Internal/admin'\r\n}"],"sourceRoot":""}